plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = 'me.lulu'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.charleskorn.kaml:kaml:0.48.0"
    implementation 'org.mongodb:mongodb-driver-sync:4.7.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    testImplementation 'com.github.seeseemelk:MockBukkit-v1.19:2.29.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
    testImplementation "io.mockk:mockk:1.13.2"
}

test {
    useJUnitPlatform()
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

shadowJar {
    relocate("com.charleskorn", "me.lulu.playerbalance.lib.com.charleskorn")
    relocate("com.mongodb", "me.lulu.playerbalance.lib.com.mongodb")
    relocate("org.bson", "me.lulu.playerbalance.lib.org.bson")
    relocate("org.intellij", "me.lulu.playerbalance.lib.org.intellij")
    relocate("org.jetbrains", "me.lulu.playerbalance.lib.org.jetbrains")
    relocate("org.snakeyaml", "me.lulu.playerbalance.lib.org.snakeyaml")

    relocate("kotlin", "me.lulu.playerbalance.lib.kotlin")
    relocate("kotlinx", "me.lulu.playerbalance.lib.kotlinx")
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
